function solution(n) {
  let [left, right] = [0, 1];
  let sum = 0;
  for(let i = 2; i <= n; i++) {
    sum = (left + right) % 1234567;
    left = right;
    right = sum;
  }
  return sum;
}

// [🚨이런 문제가 있어요]
// n이 매우 큰 경우 n번째 피보나치 수는 언어가 표현할 수 있는 자료형의 범위를 넘어가, 오버플로우가 납니다.

// 예를 들어
// 47번째 피보나치 수는 2,971,215,073이고, 이 수는 32비트 정수(ex. int) 범위를 넘어 오버플로우가 발생합니다.
// 100,000번째 피보나치 수는 자릿수가 20,000을 넘어가며, 이는 64비트 정수(ex. long) 범위를 넘어 오버플로우가 발생합니다.

// [💡그럼 코드를 어떻게 바꾸면 좋나요?]
// 모든 단계에서 % 연산을 사용하여, 모든 연산에서 오버플로우가 일어나지 않게 만들어 주세요.
// ❗ 추가로 큰수든 작은수든, 1234567으로 나눈 나머지는 1234567 보다 작으며, 0부터 1234566까지 Cycle 처럼 계속 돌게 된다.